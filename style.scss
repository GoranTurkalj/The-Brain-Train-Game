* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

html {
  width: 100vw;
  height: 100vh;
}

body {
  width: 100%;
  height: 100%;
}

#game-container {
  background-color: black;
  width: 100%;
  height: 100%;
  display: grid;

  grid-template-rows: 5rem 1fr; // title container je 5rem visine, ostatak ide gameplay-containeru
  grid-template-columns: 100%;
}
.title-container {
  grid-row: 1/2;
  grid-column: 1/-1;
  background-color: rgb(0, 0, 0);
  color: white;
  height: 5rem;
  width: 100%;
  font-family: "Anton";
  font-size: 2.5rem;
  display: flex;
  justify-content: center;
  align-items: center;
  position: relative;

  //The animation shorthand CSS property applies an animation between styles. It is a shorthand for animation-name, animation-duration, animation-timing-function, animation-delay, animation-iteration-count, animation-direction, animation-fill-mode, and animation-play-state.
  animation: animateTitleContainer 2s ease-out 3s 1 normal forwards;

  //Div for move-counter

  .move-counter {
    width: 200px;
    text-align: right;
    letter-spacing: 2px;
  }

  .timerContainer {
    width: 200px;
    letter-spacing: 2px;
  }

  p {
    transition: opacity 0.5s;
    opacity: 0%;
  }

  //get attached on move-counter and timer when game starts
  .show {
    opacity: 100%;
  }

  span {
    opacity: 0%;
    padding: 0.1rem;
  }

  // There are 2 divs with .word class - they hold the spans that make up the title
  .word {
    width: 150px;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .word--first {
    margin-left: 0.5rem;
    span:nth-of-type(1) {
      animation: animateSpan 1s linear 1s 1 normal forwards;
    }
    span:nth-of-type(2) {
      animation: animateSpan 1s linear 1.1s 1 normal forwards;
    }
    span:nth-of-type(3) {
      animation: animateSpan 1s linear 1.2s 1 normal forwards;
    }
    span:nth-of-type(4) {
      animation: animateSpan 1s linear 1.3s 1 normal forwards;
    }
    span:nth-of-type(5) {
      animation: animateSpan 1s linear 1.4s 1 normal forwards;
    }
  }
  .word--second {
    margin-right: 0.5rem;
    span:nth-of-type(1) {
      animation: animateSpan 1s linear 2s 1 normal forwards;
    }
    span:nth-of-type(2) {
      animation: animateSpan 1s linear 2.1s 1 normal forwards;
    }
    span:nth-of-type(3) {
      animation: animateSpan 1s linear 2.2s 1 normal forwards;
    }
    span:nth-of-type(4) {
      animation: animateSpan 1s linear 2.3s 1 normal forwards;
    }
    span:nth-of-type(5) {
      animation: animateSpan 1s linear 2.4s 1 normal forwards;
    }
  }
}

#logo {
  opacity: 0%;
  background-image: url("/images/logo15.png");
  background-repeat: no-repeat;
  background-size: contain;
  background-position: center;
  width: 5rem;
  height: 5rem;
  margin: 0.2rem 0.5rem;
  position: relative;
  top: 400%;
  transform: scale(2);

  animation: animateLogo 3s linear 1 normal forwards;
}

#logo::after {
  content: "";
  background-image: url("/images/logo1.png");
  background-size: 80%;
  background-position-x: 65%;
  background-position-y: -50%;
  background-repeat: no-repeat;
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0%;
  left: 0%;
}

// Sve ispod title containera spada u gameplay-container
.gameplay-container {
  grid-row: 2/-1;
  grid-column: 1/-1;
  align-items: center;
  justify-content: space-evenly;
  // border: 1px solid red;
  display: flex;
  perspective: 1000px; // this helps with styling the box for the game menu
}

//.remove-perspective se attacha na gameplay-container kad nismo u main menu
.remove-perspective {
  perspective: none;
}

//Ovaj element sadrzi izbornik u obliku boxa
.box-container {
  display: none; // not displayed until intro animation plays out, but set to block later when neeeded.
  width: 20rem;
  height: 20rem;
  position: relative;

  /*transform-style: preserve-3d; indicates that it's children will be set in 3d space. Normally if we rotated an element - it would stay IN FRONT of the elements behind it at all times. but with this preserve-3d property these elements will clip through each other if they interesect in 3d space*/
  transform-style: preserve-3d;

  transform: rotateX(-15deg) rotateY(45deg);
  animation: animateBox 3s ease-out 1 forwards;
}

// .reversed klasa se dodaje na box container NAKON što se klikne na neki od buttona u gameMenu - animacija "animateBox" se odvrti unazad.
.shrink-box {
  animation: animateBoxReversed 2s ease-out 1 reverse forwards;
}

// .grow-box is attached to box container when the player goes back to main menu

.grow-box {
  animation: animateBox 3s ease-out 1 forwards;
}

//Main styling class which is added to every div that represents one side of the box.
.box {
  transition: color 0.5s;
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: space-around;
  position: absolute;

  color: white;
}

//Individual choices

.box--back {
  background: linear-gradient(to bottom right, rgb(0, 0, 0), rgb(17, 17, 17));
  transform: translateZ(-10rem) rotateY(180deg);
}
.box--bottom {
  background: linear-gradient(to bottom right, rgb(0, 0, 0), rgb(17, 17, 17));
  transform: rotateX(-90deg) translateZ(10rem);
}
.box--right {
  background: linear-gradient(to bottom right, rgb(0, 0, 0), rgb(17, 17, 17));
  transform: rotateY(90deg) translateZ(10rem);
}

.box--front {
  background: radial-gradient(
    ellipse at bottom right,
    rgba(214, 212, 212, 0.877),
    rgb(99, 98, 98),
    rgb(0, 0, 0)
  );
  transform: translateZ(10rem);
}

.box--top {
  background: radial-gradient(rgb(46, 45, 45), rgb(17, 17, 17));
  transform: rotateX(90deg) translateZ(10rem);
}

.box--left {
  transform-style: preserve-3d; //this allows for easier transforming of button pseudo elements on this div.
  background: linear-gradient(to bottom right, rgb(0, 0, 0), rgb(7, 7, 7));
  transform: rotateY(-90deg) translateZ(10rem);

  button {
    transition: all 0.2s;
    border: none;
    padding: 1rem;
    margin: 0.5rem 0;
    width: 100%;
    outline: none;
    font-size: 1.5rem;
    font-weight: bold;
    color: white;
    background-color: transparent;
    text-align: left;
    position: relative;
  }

  button::after {
    //transition: property duration timing-function delay|initial|inherit;
    transition: all 0.2s ease-out;
    letter-spacing: 0px;
    position: absolute;
    display: inline-block;
    left: 100%;
    top: -14%;
    font-size: 1.5rem;
    width: 18rem;
    margin: 0.5rem 0;
    padding: 1rem;
    transform: rotateY(90deg) translateZ(-10rem) translateX(160px); //makes the pseudo element appear as if glued to the right (front) part of the box
    opacity: 0%; // ne vide se dok se ne napravi hover na button.
  }

  #easy-btn::after {
    content: "Board has 16 squares!";
  }
  #normal-btn::after {
    content: "Board has 20 squares!";
  }
  #hard-btn::after {
    content: "Board has 24 squares!";
  }
  #score-btn::after {
    content: "Check your best scores!!";
  }

  button:hover {
    cursor: pointer;
    letter-spacing: 3px;
    background-color: rgba(255, 255, 255, 0.555);
    color: black;

    &::after {
      background-color: rgb(255, 255, 255);
      opacity: 100%;
      color: black;
    }
  }

  #easy-btn:hover {
    padding-left: 70%;
  }
  #normal-btn:hover {
    padding-left: 55%;
  }
  #hard-btn:hover {
    padding-left: 70%;
  }
  #score-btn:hover {
    padding-left: 60%;
  }
}

//BOARD CONTAINER XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

//Board container sadrzi game board, reset button i menu button
.board-container {
  display: none;
  width: 30rem;
  height: 100%;
  position: relative; 
}
// these classes belong to board container
.show-board-container {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  animation: animateBoardContainer 1s linear normal forwards;
}

.fade-board-container {
  animation: animateBoardContainerReverse 1s linear normal forwards;
}

// Game Board
.gameBoard {
  transition: opacity 0.5s;
  display: grid;
  grid-template-columns: 1fr 1fr 1fr 1fr; // uvijek 4 stupca, redovi se generiraju automatski
  grid-gap: 0.5rem;
  width: 100%; // 100% of board container.   // height nije definiran već ovisi o broju redaka (koji ovise o difficultyju)
  padding: 0.5rem;
}
//gets attached to game board on reset click.
.fade-out {
  opacity: 0%;
}

// Squares that fill the game board
.square {
  transition: transform 1s, filter 1s, border-color 1s;
  background-color: rgb(0, 0, 0);
  background-size: contain;
  background-position: center;
  background-repeat: no-repeat;
  border: 1px solid rgb(255, 255, 255);
  width: 100%;
  height: 6rem;
}

.square:hover {
  background-color: rgb(19, 18, 18);
  cursor: pointer;
}

// Class for flipping the square divs when they are clicked
.flip {
  transform: rotateX(180deg) rotateY(180deg);
  pointer-events: none;
}

.greyed {
  filter: grayscale(100%);
}

//Class that attaches to squares when the game is won

.borderless {
  //transition: all 0.5s;
  border-color: transparent;
}

.controls-container {
  width: 100%;
  display: flex;
  padding: 0 0.5rem;

  button {
    transition: all 0.2s;
    color: white;
    font-size: 1.5rem;
    background-color: transparent;
    border: none;
    width: 50%;
    margin: 1.25% 0;
    outline: none;

    &:hover {
      letter-spacing: 3px;
      background-color: white;
      color: black;
      font-weight: bold;
      cursor: pointer;
    }
  }
}


// WIN MESSAGE XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

.message-container {
  transition: opacity 0.5s;
  opacity: 0%;
  width: 30rem; 
  height: 10%; 
  background: rgb(255, 255, 255);
  position: absolute;
  top: 40%;
  z-index: 2;

  p{
    text-align: center;
    color: black; 
    font-size: 2rem;
  }
}

.display-message {

  opacity: 100%;
}

// SCORE CONTAINER XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

.score-container {
  display: flex;
  width: 30rem;
  height: 100%;
  border: 1px solid white;

  flex-direction: column;
  align-items: center;

  p {
    height: 25%;
    width: 100%;
    background-color: rgb(12, 12, 12);
    margin: 1rem 0;
    color: white;
    font-size: 2rem;
  }

  button {
    transition: all 0.2s;
    color: white;
    font-size: 1.5rem;
    background-color: transparent;
    border: none;
    width: 50%;
    margin: 1.25% 0;
    outline: none;

    &:hover {
      letter-spacing: 3px;
      background-color: white;
      color: black;
      font-weight: bold;
      cursor: pointer;
    }
  }
}

// ANIMATIONS XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
//Animation for Game Logo
@keyframes animateLogo {
  0% {
  }

  50% {
    opacity: 100%;
  }

  100% {
    top: 0%;
    opacity: 100%;
    transform: scale(1);
  }
}

//Animation for the title letters
@keyframes animateSpan {
  0% {
  }

  100% {
    opacity: 100%;
  }
}

//Animation for the title letters when they change into "moves and "timer" during gameplay.
@keyframes animateSpanChange {
  0% {
    opacity: 0;
  }

  100% {
    opacity: 100%;
  }
}

//Animation for title container during game intro.
@keyframes animateTitleContainer {
  0% {
  }

  50% {
    background-color: white;
    color: black;
  }

  100% {
    background-color: white;
    color: black;
  }
}

@keyframes animateBox {
  0% {
    // transform: scale(0) rotateX(-90deg) rotateY(0deg);
    transform: scale(0) rotateX(90deg) rotateY(0deg);
  }

  50% {
    transform: scale(1) rotateX(90deg) rotateY(315deg);
  }
  100% {
    transform: rotateX(-15deg) rotateY(45deg);
  }
}

@keyframes animateBoxReversed {
  0% {
    // transform: scale(0) rotateX(-90deg) rotateY(0deg);
    transform: scale(0) rotateX(90deg) rotateY(0deg);
  }

  50% {
    transform: scale(1) rotateX(90deg) rotateY(315deg);
  }
  100% {
    transform: rotateX(-15deg) rotateY(45deg);
  }
}

@keyframes animateBoardContainer {
  0% {
    opacity: 0%;
  }

  100% {
    opacity: 100%;
  }
}
@keyframes animateBoardContainerReverse {
  0% {
    opacity: 100%;
  }

  100% {
    opacity: 0%;
  }
}
