* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

html {
  width: 100vw;
  height: 100vh;
}

body {
  width: 100%;
  height: 100%;
}

#game-container {
  background-color: rgb(0, 0, 0);
  width: 100%;
  height: 100%;
  display: grid;

  grid-template-rows: 10% 90%;
  grid-template-columns: 100%;
}
.title-container {
  // border: 1px solid green;
  grid-row: 1/2;
  grid-column: 1/-1;
  background-color: rgb(0, 0, 0);
  color: white;
  height: 5rem;
  width: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
  position: relative;

  //The animation shorthand CSS property applies an animation between styles. It is a shorthand for animation-name, animation-duration, animation-timing-function, animation-delay, animation-iteration-count, animation-direction, animation-fill-mode, and animation-play-state.
  animation: animateTitleContainer 2s ease-out 3s 1 normal forwards;

  span {
    font-size: 2.5rem;
    font-family: "Anton";
    opacity: 0%;
    padding: 0.1rem;
  }

  span:nth-of-type(1) {
    animation: animateSpan 1s linear 1s 1 normal forwards;
  }
  span:nth-of-type(2) {
    animation: animateSpan 1s linear 1.1s 1 normal forwards;
  }
  span:nth-of-type(3) {
    animation: animateSpan 1s linear 1.2s 1 normal forwards;
  }
  span:nth-of-type(4) {
    animation: animateSpan 1s linear 1.3s 1 normal forwards;
  }
  span:nth-of-type(5) {
    animation: animateSpan 1s linear 1.4s 1 normal forwards;
  }
  span:nth-of-type(6) {
    animation: animateSpan 1s linear 2s 1 normal forwards;
  }
  span:nth-of-type(7) {
    animation: animateSpan 1s linear 2.1s 1 normal forwards;
  }
  span:nth-of-type(8) {
    animation: animateSpan 1s linear 2.2s 1 normal forwards;
  }
  span:nth-of-type(9) {
    animation: animateSpan 1s linear 2.3s 1 normal forwards;
  }
  span:nth-of-type(10) {
    animation: animateSpan 1s linear 2.4s 1 normal forwards;
  }
}

#logo {
  opacity: 0%;
  background-image: url("/images/logo15.png");
  background-repeat: no-repeat;
  background-size: contain;
  background-position: center;
  width: 5rem;
  height: 5rem;
  margin: 0 0.5rem;
  position: relative;
  top: 400%;
  transform: scale(2);

  animation: animateLogo 3s linear 1 normal forwards;
}

#logo::after {
  content: "";
  background-image: url("/images/logo1.png");
  background-size: 80%;
  background-position-x: 65%;
  background-position-y: -50%;
  background-repeat: no-repeat;
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0%;
  left: 0%;
}

//Styling Choice Container and choice divs

.gameplay-container {
  grid-row: 2/-1;
  grid-column: 1/-1;
  align-items: center;
  justify-content: space-evenly;
  // border: 1px solid red;
  display: flex;
}

.choice-container {
  width: 20rem;
  height: 20rem;
  position: relative;

  /*transform-style: preserve-3d; indicates that it's children will be set in 3d space. Normally if we rotated an element - it would stay IN FRONT of the elements behind it at all times. but with this preserve-3d property these elements will clip through each other if they interesect in 3d space*/
  transform-style: preserve-3d;

  //transform: rotateX(-10deg) rotateY(30deg);
  //animation: animateChoiceContainer 15s linear infinite normal;
}

.choice {
  transition: color 0.5s;
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: space-around;
  position: absolute;
  border: 1px solid white;

  p {
    font-family: Verdana, Geneva, Tahoma, sans-serif;
    color: white;
  }

  .description {
    font-size: 1.5rem;
    margin-top: 3rem;
  }

  .info {
    font-size: 1rem;
    margin-top: -5rem;
  }

  button {
    transition: all 0.5s;
    border: none;
    padding: 0.5rem;
    // margin-top: 10rem;
    width: 80%;
    outline: none;
    font-size: 1.5rem;
    color: white;
    background-color: black;
  }

  button:hover {
    cursor: pointer;
    letter-spacing: 3px;
    color: rgb(0, 255, 0);
  }

  //The following selector matches <h1> elements only if they have a <p> element directly following them: h1:has(+ p)
}

//Individual choices
.choice--easy {
  background-color: rgb(0, 0, 0);
  transform: translateZ(10rem);

  //Zelim selektirati paragraf kad se button hovera
  //button:nth-child(1):hover ~ .shape
}

.choice--normal {
  background-color: rgb(0, 0, 0);
  transform: rotateX(90deg) translateZ(10rem);
}
//A horizontal flip would involve scaling scale(-1, 1);
//A vertical flip would involve scaling scale(1, -1);
.choice--hard {
  background-color: rgb(0, 0, 0);
  transform: scale(-1, 1) rotateZ(180deg) translateZ(-10rem);
}
.choice--score {
  background-color: rgb(0, 0, 0);
  transform: rotateX(-90deg) translateZ(10rem);
}

//Game Board Container

.board-container {
  display: none;
  width: 23rem;
  height: 100%;
  // border: 1px solid red;
}

.flexed {
  display: flex;
  flex-direction: column;
  justify-content: space-around;
}

// Gameplay Info div

.gameplay-info {
  color: white;
  text-align: start;
  padding: 0.5rem;
  background-color: rgb(51, 49, 49);
  width: 100%;
  height: 5%;

  span {
    font-size: 1.5rem;
    margin: 0 2rem;
  }
}

// Game Board
.gameBoard {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr 1fr;
  grid-template-columns: 1fr 1fr 1fr 1fr;
  grid-gap: 0.5rem;
  width: 100%;
  height: 60%;

  border: 1px solid rgb(255, 255, 255);
  padding: 0.5rem;
}

// Squares that fill the game board
.square {
  transition: transform 1s;
  background-color: rgb(0, 0, 0);
  background-size: 95%;
  background-position: center;
  background-repeat: no-repeat;
  border: 1px solid rgb(255, 255, 255);
  width: 100%;
  height: 100%;
}

.square:hover {
  background-color: rgb(19, 18, 18);
  cursor: pointer;
}

// Class for flipping the square divs when they are clicked

.flip {
  transform: rotateX(180deg) rotateY(180deg);
}

// Restart button

.restart {
  transition: all 0.5s;
  color: white;
  font-size: 1.5rem;
  background-color: rgb(44, 43, 43);
  border: none;
  width: 100%;
  height: 5%;
  outline: none;
}

.restart:hover {
  color: rgb(0, 255, 0);
  letter-spacing: 3px;
  cursor: pointer;
}

//Animation for Game Logo
@keyframes animateLogo {
  0% {
  }

  50% {
    opacity: 100%;
  }

  100% {
    top: 0%;
    opacity: 100%;
    transform: scale(1);
  }
}

//Animation for the title letters
@keyframes animateSpan {
  0% {
  }

  100% {
    opacity: 100%;
  }
}

@keyframes animateTitleContainer {
  0% {
  }

  50% {
    background-color: white;
    color: black;
  }

  100% {
    background-color: white;
    color: black;
  }
}

@keyframes animateChoiceContainer {
  0% {
    // transform: rotateX(-10deg) rotateY(0deg);
    transform: rotateX(0deg);
  }

  50% {
  }

  100% {
    //transform: rotateX(-10deg) rotateY(360deg);
    transform: rotateX(-360deg);
  }
}

//The transition CSS property is a shorthand property for transition-property, transition-duration, transition-timing-function, and transition-delay.
